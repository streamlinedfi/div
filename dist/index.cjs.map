{"version":3,"sources":["../src/Div.js","../src/utils.js","../src/rules.js","../src/Text.js","../src/createUISystem.js"],"names":["entries","upperFirst","str","kebabCase","string","x","spacing","val","theme","pixelate","fromEntries"],"mappings":"AAAA,04BAAmB,GCAb,CAAE,OAAA,CAAAA,CAAQ,CAAA,CAAI,MAAA,CAEPC,CAAAA,CAAaC,CAAAA,EAAOA,CAAAA,CAAI,MAAA,CAAO,CAAC,CAAA,CAAE,WAAA,CAAY,CAAA,CAAIA,CAAAA,CAAI,KAAA,CAAM,CAAC,CAAA,CAE7DC,CAAAA,CAAY,CAACC,CAAAA,CAAS,EAAA,CAAA,mCACjCA,CAAAA,qBACG,KAAA,mBAAM,oEAAoE,CAAA,6BACzE,GAAA,mBAAIC,CAAAA,EAAKA,CAAAA,CAAE,WAAA,CAAY,CAAC,CAAA,6BACxB,IAAA,mBAAK,GAAG,GAAA,SAAK,IAAA,CAEZ,SAASC,CAAAA,CAAQC,CAAAA,CAAKC,CAAAA,CAAO,CASlC,MARI,SAAA,CAAU,IAAA,CAAKD,CAAG,CAAA,EAIlB,OAAOA,CAAAA,EAAQ,QAAA,EAIfA,CAAAA,GAAQ,CAAA,CACHA,CAAAA,CAGFC,CAAAA,CAAM,OAAA,CAAQD,CAAG,CAC1B,CAEO,SAASE,CAAAA,CAASF,CAAAA,CAAK,CAC5B,OAAI,OAAOA,CAAAA,EAAQ,QAAA,CACV,CAAA,EAAA;AC6BH;AAAA;AAII,EAAA;AAAA;AAAA;AAIJ,EAAA;AAAA;AAYA,EAAA;AAAA;AAAA;AAIA,QAAA;AAAA;AAME,UAAA;AAgB0B,QAAA;AAWrB;AAAA;AA4BY,EAAA;AAAA;AAEgD,iBAAA;AAYhD,IAAA;AAAA;AAEkD,kBAAA;AAcpE,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CP,EAAA;AAMyE,oBAAA;AACC,qBAAA;AAIjD,IAAA;AAC+C,mBAAA;AACG,sBAAA;AAwBlD,IAAA;AAC8C,mBAAA;AACC,oBAAA;AAI/C,IAAA;AAC6C,kBAAA;AACG,qBAAA;AAa5D,IAAA;AACwC,kCAAA;AACC,mCAAA;AACG,sCAAA;AACD,qCAAA;AA0BxD,QAAA;AFhL0B,EAAA;AGzGf;AAQc;AAAA;AAAA;AAAA;AASvB,sCAAA;AAEQ,EAAA;AAAA;AAAA;AAAA;AAAA;AASQ,EAAA;AACQ,EAAA;AACY,EAAA;ACxBjCG","file":"/Users/jason/Code/streamlined.fi/_div/dist/index.cjs","sourcesContent":["import styled from 'styled-components';\nimport { cssWhiteList, divRules } from './rules';\nimport {\n  getMediaPropRegex,\n  getRuleIndex,\n  kebabCase,\n  upperFirst,\n} from './utils';\n\nconst { keys } = Object;\n\n/**\n * @example\n * <Div\n *   $w={690}\n *   $h={420}\n *   $mobile$w={320}\n * />\n */\n\nexport function renderCss(props, rules) {\n  let css = '';\n\n  const ruleIndex = getRuleIndex(rules);\n  const mediaPropRegex = getMediaPropRegex(props.theme);\n\n  let i = -1;\n  const propKeys = keys(props);\n  while (++i < propKeys.length) {\n    const propExt = propKeys[i];\n\n    if (/^\\$/.test(propExt)) {\n      const value = props[propExt];\n\n      if (value !== false) {\n        const match = propExt.match(mediaPropRegex) || [];\n        const [, media, mediaPropExt] = match;\n\n        const cleanProp = (mediaPropExt || propExt).slice(1);\n        const parts = cleanProp.split('$');\n        const prop = parts[0];\n        const extensions = parts.slice(1);\n\n        const foundRule =\n          ruleIndex[prop] || (cssWhiteList[prop] && kebabCase(prop));\n\n        if (foundRule) {\n          const config = foundRule;\n          const outputValue =\n            config.withTheme && typeof value === 'function'\n              ? value(props.theme)\n              : value;\n          const formattedValue = config.format\n            ? config.format(outputValue, props.theme)\n            : outputValue;\n\n          let ruleCss = '';\n          if (typeof config === 'string') {\n            ruleCss = config;\n          } else if (typeof config === 'function') {\n            ruleCss = config(props, media, extensions);\n          } else if (typeof config.css === 'function') {\n            ruleCss = config.css(props, media, extensions);\n          } else {\n            ruleCss = config.css;\n          }\n\n          let cssString = '';\n          const colons = ruleCss.match(/:/g);\n          if (colons && colons.length > 1) {\n            cssString = ruleCss;\n          } else if (colons === null) {\n            cssString = `${ruleCss}: ${formattedValue};`;\n          } else {\n            cssString = `${ruleCss.replace(/;$/, '')};`;\n          }\n\n          if (extensions.includes('important')) {\n            cssString = cssString.replace(/;/g, ' !important;');\n          }\n\n          if (extensions.includes('hover') && !extensions.includes('focus')) {\n            cssString = `&:hover,&:focus { ${cssString} }`;\n          }\n\n          if (extensions.includes('hover') && extensions.includes('focus')) {\n            cssString = `&:hover { ${cssString} }`;\n          }\n\n          if (extensions.includes('focus')) {\n            cssString = `&:focus { ${cssString} }`;\n          }\n\n          if (extensions.includes('active')) {\n            cssString = `&:active { ${cssString} }`;\n          }\n\n          if (extensions.includes('last')) {\n            cssString = `&:last-child { ${cssString} }`;\n          }\n\n          if (extensions.includes('odd')) {\n            cssString = `&:nth-child(odd) { ${cssString} }`;\n          }\n\n          if (extensions.includes('even')) {\n            cssString = `&:nth-child(even) { ${cssString} }`;\n          }\n\n          if (media) {\n            const cssMedia = props.theme.Breakpoints.getCssMedia(\n              props.theme.Breakpoints[upperFirst(media)],\n            );\n            cssString = `${cssMedia} { ${cssString} }`;\n          }\n\n          css += cssString;\n        }\n      }\n    }\n  }\n\n  return css;\n}\n\nexport const divMixin = props => renderCss(props, divRules);\n\nconst Div = styled.div`\n  ${props => divMixin(props)}\n`;\n\nexport default Div;\n","const { entries } = Object;\n\nexport const upperFirst = str => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const kebabCase = (string = '') =>\n  string\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    ?.map(x => x.toLowerCase())\n    ?.join('-') ?? '';\n\nexport function spacing(val, theme) {\n  if (/(px|%)$/.test(val)) {\n    return val;\n  }\n\n  if (typeof val === 'string') {\n    return val;\n  }\n\n  if (val === 0) {\n    return val;\n  }\n\n  return theme.spacing(val);\n}\n\nexport function pixelate(val) {\n  if (typeof val === 'number') {\n    return `${val}px`;\n  }\n  return val;\n}\n\nexport function getPropValue(props, media, ...propKeys) {\n  let value;\n  for (let i = 0; i < propKeys.length; i++) {\n    const key = propKeys[i];\n    if (media) {\n      const mediaVal = props[`$${media}$${key}`];\n      if (mediaVal) {\n        value = mediaVal;\n        break;\n      }\n    }\n    const val = props[`$${key}`];\n    if (val) {\n      value = val;\n      break;\n    }\n  }\n\n  return value;\n}\n\nexport function isPropPresent(props, media, ...propKeys) {\n  return !!getPropValue(props, media, ...propKeys);\n}\n\nlet ruleIndex = null;\nexport function getRuleIndex(rules) {\n  if (ruleIndex) return ruleIndex;\n\n  const index = {};\n  entries(rules).forEach(([ruleProp, config]) => {\n    ruleProp.split('|').forEach(prop => {\n      index[prop] = config;\n    });\n  });\n  ruleIndex = index;\n\n  return index;\n}\n\nlet mediaPropRegex = null;\nexport function getMediaPropRegex(theme) {\n  if (mediaPropRegex) return mediaPropRegex;\n\n  mediaPropRegex = new RegExp(\n    `^\\\\$(${theme.Breakpoints.keys.join('|')})(\\\\$.*)`,\n  );\n\n  return mediaPropRegex;\n}\n\nexport function colorMixin(color, theme) {\n  if (color) {\n    if ([100, 200, 300, 400, 500, 600, 700, 800, 900].includes(color)) {\n      return `color: ${theme[`fill${color}`]};`;\n    }\n\n    if (typeof color === 'string') {\n      if (theme[color]) {\n        return `color: ${theme[color]};`;\n      }\n      return `color: ${color};`;\n    }\n  }\n\n  return '';\n}\n\nexport const sizeFormatter = value => {\n  if (typeof value === 'number') {\n    return `${value}px`;\n  }\n  return value;\n};\n","/* eslint-disable no-nested-ternary */\nimport { getPropValue, isPropPresent, pixelate, spacing } from './utils';\n\nconst { fromEntries } = Object;\n\nexport const cssWhiteList = fromEntries(\n  [\n    'display',\n    'align',\n    'vAlign',\n    'alignItems',\n    'alignContent',\n    'alignSelf',\n    'justifyContent',\n    'justifySelf',\n    'flexDirection',\n    'flexBasis',\n    'flexWrap',\n    'pointerEvents',\n    'cursor',\n    'position',\n    'opacity',\n    'backgroundColor',\n    'backgroundImage',\n    'backgroundSize',\n    'backgroundPosition',\n    'backgroundRepeat',\n    'transform',\n    'transformOrigin',\n    'textDecoration',\n    'textWrap',\n    'animation',\n    'fontWeight',\n    'gap',\n    'gridTemplateColumns',\n    'gridTemplateRows',\n    'wordBreak',\n    'whiteSpace',\n    'textOverflow',\n    'overflow',\n    'overflowX',\n    'overflowY',\n    'textAlign',\n    'transitionDelay',\n    'filter',\n    'listStyle',\n    'objectFit',\n    'objectPosition',\n    'willChange',\n    'boxSizing',\n  ].map(prop => [prop, 1]),\n);\n\n// short hand rules for the div component\nexport const divRules = {\n  inline: 'display: inline',\n  block: 'display: block',\n  flex: `\n    display: flex;\n    width: 100%;\n  `,\n  autoFlex: `\n    display: flex;\n    width: auto;\n  `,\n  grid: `\n    display: grid;\n  `,\n  hide: 'display: none',\n  inlineBlock: 'display: inline-block',\n  inlineFlex: 'display: inline-flex',\n  'column|col': 'flex-direction: column;',\n  row: 'flex-direction: row;',\n  spaceBetween: 'justify-content: space-between;',\n  wrap: 'flex-wrap: wrap;',\n  innerCenter: (props, media) =>\n    isPropPresent(props, media, 'flex', 'inlineFlex')\n      ? `\n          justify-content: center;\n          align-items: center;\n        `\n      : `\n          text-align: center;\n          ${\n            isPropPresent(props, media, 'h', 'height')\n              ? `line-height: ${getPropValue(props, media, 'h', 'height')};`\n              : ''\n          }\n        `,\n  innerLeft: (props, media) =>\n    isPropPresent(props, media, 'flex', 'inlineFlex')\n      ? isPropPresent(props, media, 'column', 'col')\n        ? 'align-items: flex-start;'\n        : 'justify-content: flex-start;'\n      : 'text-align: left;',\n  innerRight: (props, media) =>\n    isPropPresent(props, media, 'flex', 'inlineFlex')\n      ? isPropPresent(props, media, 'column', 'col')\n        ? 'align-items: flex-end;'\n        : 'justify-content: flex-end;'\n      : 'text-align: right;',\n  innerTop: (props, media) => {\n    return isPropPresent(props, media, 'flex', 'inlineFlex')\n      ? isPropPresent(props, media, 'column', 'col')\n        ? 'justify-content: flex-start;'\n        : 'align-items: flex-start;'\n      : '';\n  },\n  innerBottom: (props, media) =>\n    isPropPresent(props, media, 'flex', 'inlineFlex')\n      ? isPropPresent(props, media, 'column', 'col')\n        ? 'justify-content: flex-end;'\n        : 'align-items: flex-end;'\n      : '',\n  outerCenter: `\n    margin-left: auto;\n    margin-right: auto;\n  `,\n  grow: {\n    css: 'flex-grow',\n    format: Number,\n  },\n  shrink: {\n    css: 'flex-shrink',\n  },\n  'colReverse|columnReverse': {\n    css: 'flex-direction: column-reverse;',\n  },\n  reverse: {\n    css: 'flex-direction: row-reverse;',\n  },\n\n  // dimensions\n  'width|w': {\n    css: 'width',\n    format: pixelate,\n  },\n  'minWidth|minW': {\n    css: 'min-width',\n    format: pixelate,\n  },\n  'maxWidth|maxW': {\n    css: (props, media) => `\n      width: 100%;\n      max-width: ${pixelate(getPropValue(props, media, 'maxWidth', 'maxW'))};\n    `,\n  },\n  'height|h': {\n    css: 'height',\n    format: pixelate,\n  },\n  'minHeight|minH': {\n    css: 'min-height',\n    format: pixelate,\n  },\n  'maxHeight|maxH': {\n    css: (props, media) => `\n      height: 100%;\n      max-height: ${pixelate(getPropValue(props, media, 'maxHeight', 'maxH'))};\n    `,\n  },\n  'lineHeight|lineH|lh': {\n    css: 'line-height',\n    format: pixelate,\n  },\n  pointer: 'cursor: pointer;',\n\n  // position\n  relative: 'position: relative',\n  absolute: 'position: absolute',\n  fixed: 'position: fixed',\n  static: 'position: static',\n  cover: `\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  `,\n  'zIndex|z': {\n    css: 'z-index',\n    withTheme: true,\n  },\n  top: {\n    css: 'top',\n    format: pixelate,\n  },\n  right: {\n    css: 'right',\n    format: pixelate,\n  },\n  bottom: {\n    css: 'bottom',\n    format: pixelate,\n  },\n  left: {\n    css: 'left',\n    format: pixelate,\n  },\n\n  'padding|p': {\n    css: 'padding',\n    format: spacing,\n  },\n  'paddingTop|pt': {\n    css: 'padding-top',\n    format: spacing,\n  },\n  'paddingRight|pr': {\n    css: 'padding-right',\n    format: spacing,\n  },\n  'paddingBottom|pb': {\n    css: 'padding-bottom',\n    format: spacing,\n  },\n  'paddingLeft|pl': {\n    css: 'padding-left',\n    format: spacing,\n  },\n  'paddingX|px': {\n    css: (props, media) => `\n      padding-left: ${spacing(getPropValue(props, media, 'paddingX', 'px'))};\n      padding-right: ${spacing(getPropValue(props, media, 'paddingX', 'px'))};\n    `,\n  },\n  'paddingY|py': {\n    css: (props, media) => `\n      padding-top: ${spacing(getPropValue(props, media, 'paddingY', 'py'))};\n      padding-bottom: ${spacing(getPropValue(props, media, 'paddingY', 'py'))};\n    `,\n  },\n  'margin|m': {\n    css: 'margin',\n    format: spacing,\n  },\n  'marginTop|mt': {\n    css: 'margin-top',\n    format: spacing,\n  },\n  'marginRight|mr': {\n    css: 'margin-right',\n    format: spacing,\n  },\n  'marginBottom|mb': {\n    css: 'margin-bottom',\n    format: spacing,\n  },\n  'marginLeft|ml': {\n    css: 'margin-left',\n    format: spacing,\n  },\n  'marginX|mx': {\n    css: (props, media) => `\n      margin-left: ${spacing(getPropValue(props, media, 'marginX', 'mx'))};\n      margin-right: ${spacing(getPropValue(props, media, 'marginX', 'mx'))};\n    `,\n  },\n  'marginY|my': {\n    css: (props, media) => `\n      margin-top: ${spacing(getPropValue(props, media, 'marginY', 'my'))};\n      margin-bottom: ${spacing(getPropValue(props, media, 'marginY', 'my'))};\n    `,\n  },\n\n  // style\n  'background|bg': {\n    css: 'background',\n    withTheme: true,\n  },\n  'borderRadius|radius': {\n    css: (props, media) => {\n      const radius = getPropValue(props, media, 'borderRadius', 'radius');\n      if (Array.isArray(radius)) {\n        return `\n          border-top-left-radius: ${pixelate(radius[0])};\n          border-top-right-radius: ${pixelate(radius[1])};\n          border-bottom-right-radius: ${pixelate(radius[2])};\n          border-bottom-left-radius: ${pixelate(radius[3])};\n        `;\n      }\n      return `border-radius: ${pixelate(radius)}`;\n    },\n  },\n  borderTopLeftRadius: {\n    css: 'border-top-left-radius',\n    format: pixelate,\n  },\n  borderTopRightRadius: {\n    css: 'border-top-right-radius',\n    format: pixelate,\n  },\n  borderBottomRightRadius: {\n    css: 'border-bottom-right-radius',\n    format: pixelate,\n  },\n  borderBottomLeftRadius: {\n    css: 'border-bottom-left-radius',\n    format: pixelate,\n  },\n  borderColor: {\n    css: 'border-color',\n    withTheme: true,\n  },\n  borderImage: {\n    css: 'border-image',\n    withTheme: true,\n  },\n  ...[\n    ['border', 'border'],\n    ['borderTop', 'border-top'],\n    ['borderRight', 'border-right'],\n    ['borderBottom', 'border-bottom'],\n    ['borderLeft', 'border-left'],\n  ].reduce(\n    (rules, [jsKey, cssKey]) => ({\n      ...rules,\n      [jsKey]: {\n        css: (props, media, extensions) => {\n          const propValue = getPropValue(\n            props,\n            media,\n            extensions?.length ? [jsKey, ...extensions].join('$') : jsKey,\n          );\n\n          // withTheme\n          const value =\n            typeof propValue === 'function'\n              ? propValue(props.theme)\n              : propValue;\n\n          if (!/^\\d/.test(value)) {\n            return `${cssKey}: 1px solid ${value}`;\n          }\n          return `${cssKey}: ${value}`;\n        },\n      },\n    }),\n    {},\n  ),\n  transition: (props, media) => {\n    const value = getPropValue(props, media, 'transition');\n    return typeof value === 'string'\n      ? `transition: ${value}`\n      : 'transition: all .2s';\n  },\n  'boxShadow|shadow': {\n    css: 'box-shadow',\n    withTheme: true,\n  },\n  textShadow: {\n    css: 'text-shadow',\n    withTheme: true,\n  },\n  color: {\n    css: 'color',\n    withTheme: true,\n  },\n  fill: {\n    css: 'fill',\n    withTheme: true,\n  },\n  fontSize: {\n    css: 'font-size',\n    format: pixelate,\n  },\n  outline: {\n    css: 'outline',\n    withTheme: true,\n  },\n};\n","import styled from 'styled-components';\nimport { colorMixin, sizeFormatter } from './utils';\n\nimport { divMixin, renderCss } from './Div';\n\nconst textRules = {\n  weight: 'font-weight',\n  size: {\n    css: 'font-size',\n    format: sizeFormatter,\n  },\n  color: {\n    css: (props, media, extensions) => {\n      const color = extensions.includes('hover')\n        ? props.$color$hover\n        : props.$color;\n\n      return colorMixin(color, props.theme);\n    },\n  },\n  tnum: 'font-feature-settings: \"tnum\";letter-spacing:-0.04em;',\n  breakWord: 'word-break: break-word;',\n  noBreak: 'white-space: nowrap;',\n  uppercase: 'text-transform: uppercase;',\n  serif: 'font-family: \"Times New Roman\", Times, serif',\n  'spacing|letterSpacing': `letter-spacing`,\n  left: 'text-align: left;',\n  right: 'text-align: right;',\n  center: 'text-align: center;',\n  lineThrough: 'text-decoration: line-through',\n  // underline: 'text-decoration: underline;',\n  linearGradient: props => `\n    -webkit-text-fill-color: transparent;\n    text-fill-color: transparent;\n    -webkit-background-clip: text;\n    background-clip: text;\n    background-image: linear-gradient(${\n      typeof props.$linearGradient === 'function'\n        ? props.$linearGradient(props.theme)\n        : props.$linearGradient\n    });\n  `,\n  ellipsis: `\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    max-width: 100%;\n  `,\n  underline: 'text-decoration: underline;',\n};\n\nconst Text = styled.p`\n  ${props => divMixin(props)}\n  ${props => renderCss(props, textRules)}\n`;\n\nexport default Text;\n","import { upperFirst } from './utils';\n\nconst { keys, entries, fromEntries } = Object;\n\nconst getDefaultWidth = () => {\n  return typeof window !== 'undefined' && typeof document !== 'undefined'\n    ? document.body.clientWidth\n    : 0;\n};\n\nconst createBreakpoints = breakpoints => {\n  return {\n    getCssMedia: ({ min, max }) => {\n      if (min && max) {\n        return `@media (min-width: ${min}px) and (max-width: ${max}px)`;\n      }\n\n      if (min) {\n        return `@media (min-width: ${min}px)`;\n      }\n\n      return `@media (max-width: ${max}px)`;\n    },\n    keys: keys(breakpoints),\n    ...fromEntries(\n      entries(breakpoints).map(([key, { min, max }]) => {\n        return [upperFirst(key), { min, max }];\n      }),\n    ),\n    ...fromEntries(\n      entries(breakpoints).map(([key, { min = 0, max = Infinity }]) => {\n        return [\n          `is${upperFirst(key)}`,\n          (width = getDefaultWidth()) =>\n            width !== 0 && width >= min && width <= max,\n        ];\n      }),\n    ),\n  };\n};\n\nconst createSpacing = spacingUnit => (multiplier, adjuster = 0, usePx = true) =>\n  (multiplier || 1) * spacingUnit + adjuster + (usePx ? 'px' : 0);\n\nfunction createUISystem({ theme, breakpoints, spacingUnit }) {\n  const Breakpoints = createBreakpoints(breakpoints);\n\n  return {\n    theme: {\n      ...theme,\n      Breakpoints,\n      spacing: createSpacing(spacingUnit),\n    },\n    Breakpoints,\n  };\n}\n\nexport default createUISystem;\n"]}